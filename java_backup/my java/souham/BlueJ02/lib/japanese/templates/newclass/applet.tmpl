$PKGLINE
import java.applet.Applet;
import java.awt.*;

/**
 * アプレットクラス $CLASSNAME のための注釈をここに書きます.
 *
 * @author (あなたの名前)
 * @version (バージョン番号もしくは日付)
 */
public class $CLASSNAME extends Applet
{
	// インスタンス変数 - コードに合わせて説明を書き換えます
	private int x;

	/**
	 * システムに読みこまれたことをアプレットに通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * 常にstartメソッドの呼び出しに先立って呼ばれます.
	 */
	public void init()
	{
		// アプレットに必要な初期設定を書きます

	}

	/**
	 * 実行を始めるべきであることをアプレットに通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * ウェブページ上のアプレットを訪れるたびに、
	 * initメソッドが呼ばれたあとで呼ばれます.
	 */
	public void start()
	{
		// ウェブページが訪問される(表示される)たびに動作するよう
		// 必要なコードを書きます

	}


	/**
	 * アプレットで最も重要なメソッドでしょう. 
	 * ここでアプレットの描画が行なわれます.
	 * paintは、画面が描画されるべきときは常に呼ばれます。
	 * アプレットの内容を表示するためのコードをここに書いてください.
	 *
	 * @param  g   このアプレットのための Graphics オブジェクト
	 */
	public void paint(Graphics g)
	{
		// シンプルなテキストがアプレットに表示されます
		g.setColor(Color.white);
		g.fillRect(0, 0, 200, 100);
		g.setColor(Color.black);
		g.drawString("サンプルアプレット", 20, 20);
		g.setColor(Color.blue);
		g.drawString("created by BlueJ", 20, 40);
	}


	/** 
	 * 実行を終了すべきであることをアプレットに通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * このアプレットを表示しているウェブページから他のページに移ったときや、
	 * アプレットが消去される必要がある前に呼ばれます.
	 * 解放しなければならないリソース(停止してほしいスレッドなど)がない場合は、
	 * このメソッドを削除できます.
	 */
	public void stop()
	{
		// 他のページに表示が取って代わられたときや、アプレットを消去する前に、
		// 実行する必要があるコードを書きます
	}


	/**
	 * 割り当てられたリソースをすべて解放すべきであるとアプレットに通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * destroyに先立ち、常にstopメソッドが呼ばれます.
	 * 解放しなければならないリソースがない場合は、このメソッドを削除できます.
	 */
	public void destroy()
	{
		// アプレットが消去される際に実行するコードを書きます
	}


	/**
	 * このアプレットに関する情報を返します.
	 * アプレットは、アプレットの作者、バージョン、および著作権についての
	 * 情報を含む文字列を返すこのメソッドをオーバーライドすべきです.
	 *
	 * @return このアプレットに関するString形式の情報
	 */
	public String getAppletInfo()
	{
		// あなた自身の情報と置き換えてください
		return "タイトル: BlueJ アプレットデモ\n" + 
			   "作者: Bruce Quig\n" +
			   "ふたつの文字列を描画するシンプルなアプレット.";
	}


	/**
	 * このアプレットが解釈するパラメータに関する情報を返します.
	 * パラメータごとに詳細を別々に提供するため、String配列を返します.
	 * 配列の個々の要素は、名前・データ型・注釈の３つの文字列のセットです.
	 *
	 * @return このアプレットについての String[][] 形式のパラメータ情報
	 */
	public String[][] getParameterInfo()
	{
		// アプレットのパラメータ情報を書きます
		String paramInfo[][] = {
			 {"firstParameter", "1-10", "description of first parameter"},
			 {"secondParameter", "boolean", "description of second parameter"}
		};
		return paramInfo;
	}
}
