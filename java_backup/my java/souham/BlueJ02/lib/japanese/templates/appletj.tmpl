$PKGLINE/**
 * $CLASSNAME クラス - クラスの注釈をここに書きます.
 * 
 * @author: 
 * date: 
 */

import javax.swing.JApplet;
import javax.swing.JRootPane;
import java.awt.Graphics;

public class $CLASSNAME extends JApplet
{
	// インスタンス変数 - 下記の例を置き換えてください
	private int x;

	 /**
	 * システムに読みこまれたことをアプレット(JApplet)に通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * 常にstartメソッドの呼び出しに先立って呼ばれます.
	 */
	public void init()
	{
		// これは、起動時にアクセスをチェックするためにJAppletsが行なう
		// AWTシステムイベントキューへのアクセスを、
		// 許さないNetscape、Internet Explorerを含む現在のブラウザにある
		// セキュリティ矛盾のための代替手段です。
		JRootPane rootPane = this.getRootPane();	
		rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
	
		// アプレット(JApplet)に必要な初期設定を書きます

	}

	/**
	 * 実行を始めるべきであることをアプレット(JApplet)に通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * ウェブページ上のアプレット(JApplet)を訪れるたびに、
	 * initメソッドが呼ばれたあとで呼ばれます.
	 */
	public void start()
	{
		// ウェブページが訪問される(表示される)たびに動作するよう
		// 必要なコードを書きます

	}

	/** 
	 * 実行を終了すべきであることをアプレット(JApplet)に通知するために、
	 * ブラウザまたはアプレットビューアによって呼ばれます.
	 * このアプレット(JApplet)を表示しているウェブページから他のページに移ったときや、
	 * アプレット(JApplet)が消去される必要がある前に呼ばれます.
	 */
	public void stop()
	{
		// 他のページに表示が取って代わられたときや、アプレット(JApplet)を消去する前に、
		// 実行する必要があるコードを書きます
	
	}

	/**
	 * 割り当てられたリソースをすべて解放すべきであるとアプレット(JApplet)に
	 * 通知するために、ブラウザまたはアプレットビューアによって呼ばれます.
	 * destroyに先立ち、常にstopメソッドが呼ばれます.
	 */
	public void destroy()
	{
		// アプレット(JApplet)が消去される際に実行するコードを書きます
	
	}


	/**
	 * このアプレットに関する情報を返します.
	 * アプレットは、アプレット(JApplet)の作者、バージョン、および著作権についての
	 * 情報を含む文字列を返すこのメソッドをオーバーライドすべきです.
	 *
	 * @return このアプレット(JApplet)に関するString形式の情報
	 */
	public String getAppletInfo()
	{
		// アプレットに関する情報を書きます
		return "タイトル:   \n作者:   \nシンプルなアプレットの注釈例. ";
	}


	/**
	 * このアプレット(JApplet)に関するパラメータ情報を返します. 
	 * このアプレット(JApplet)が解釈するパラメータに関する情報を返します.
	 * アプレットは、これらパラメータを説明するString配列を返すこのメソッドを
	 * オーバーライドすべきです.
	 * 配列の個々の要素は、名前・データ型・注釈の３つの文字列のセットです.
	 *
	 * @return このアプレット(JApplet)についての String[][] 形式のパラメータ情報
	 */
	public String[][] getParameterInfo()
	{
		// アプレットのパラメータ情報を書きます
		String paramInfo[][] = {
				 {"firstParameter",	"1-10",	"description of first parameter"},
				 {"status", "boolean", "description of second parameter"},
				 {"images",   "url",	 "description of third parameter"}
		};
		return paramInfo;
	}

	/**
	 * アプレットのためのpaintメソッド
	 * 
	 * @param  g   このアプレットのための Graphics オブジェクト
	 */
	public void paint(Graphics g)
	{
		// シンプルなテキストがアプレットに表示されます
		g.drawString("JAppletのサンプル", 20, 20);
	}


	/**
	 * メソッドのサンプル - 自分のコメントで置き換えてください.
	 * 	
	 * @param  y メソッドのパラメータ例
	 * @return	 x と y の和
	 */
	public int sampleMethod(int y)
	{
		// ここにあなたのコードを書きます
		return x + y;
	}
}
